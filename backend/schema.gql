# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type ADUser {
  dn: String!
  userPrincipalName: String!
  cn: String!
}

input CreateProjectDto {
  name: String!
  description: String
}

input CreateTaskDto {
  name: String!
  description: String
  dueDate: DateTime!
  completed: Boolean
  project: String!
}

input CreateUserDto {
  name: String!
  adEmail: String
  email: String!
  password: String
  roleSlugs: [String!]
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Group {
  id: Float!
  name: String!
  users: [User!]!
}

type Mutation {
  createUser(input: CreateUserDto!): UserDto!
  signup(input: SignUpUserDto!): UserAuthDto!
  signin(auth: UserAuthInputDto!): UserAuthDto!
  logout: Boolean!
  deleteUser(userId: String!): Boolean!
  createProject(input: CreateProjectDto!): ProjectDto!
  deleteProject(projectId: String!): ProjectDto!
  updateProject(updates: UpdateProjectDto!, filter: ProjectsFilter!): ProjectDto!
  createTask(input: CreateTaskDto!): TaskDto!
  deleteTask(filter: TasksFilter!): TaskDto!
  updateTask(updates: UpdateTaskDto!, filter: TasksFilter!): TaskDto!
}

type Permission {
  id: ID!
  name: String!
  slug: String!
  roles: [Role!]!
}

type PermissionDto {
  id: ID!
  name: String!
  slug: String!
}

type PermissionStateDto {
  slug: String!
  permitted: Boolean!
}

type Project {
  id: ID!
  name: String!
  description: String!
  user: User!
  tasks: [Task!]!
}

type ProjectDto {
  id: ID!
  name: String!
  description: String!
  user: UserDto!
  tasks: [TaskDto!]
}

input ProjectsFilter {
  _id: String
  name: String
  user: String
}

type Query {
  authUser(auth: UserAuthInputDto!): ADUser!
  user(id: Float, email: String, adEmail: String, name: String): UserDto!
  users: [UserDto!]!
  me: UserAuthDto
  meExtended: UserAuthDto
  roles(filter: RolesFilter!): [RoleDto!]!
  projects(filter: ProjectsFilter!): [ProjectDto!]!
  project(filter: ProjectsFilter!): ProjectDto!
  task(filter: TasksFilter!): TaskDto!
}

type Role {
  id: ID!
  name: String!
  slug: String!
  admin: Boolean!
  permissions: [Permission!]!
  users: [User!]!
}

type RoleDto {
  id: ID!
  name: String!
  slug: String!
  admin: Boolean!
  permissions: [PermissionDto!]!
}

input RolesFilter {
  id: Float
  name: String
  slug: String
  admin: Boolean
  permission: String
  user: String
}

input SignUpUserDto {
  name: String
  email: String
  password: String
}

type Task {
  id: ID!
  name: String!
  description: String!
  dueDate: DateTime!
  createdAt: DateTime!
  completed: Boolean!
  project: Project!
}

type TaskDto {
  id: Float!
  name: String!
  description: String!
  dueDate: DateTime!
  createdAt: DateTime!
  completed: Boolean!
  project: ProjectDto!
}

input TasksFilter {
  id: Float
  name: String
}

input UpdateProjectDto {
  name: String
  description: String
}

input UpdateTaskDto {
  name: String
  description: String
  dueDate: DateTime
}

type User {
  id: ID!
  name: String!
  password: String!
  email: String!
  adEmail: String!
  roles: [Role!]!
  groups: [Group!]!
}

type UserAuthDto {
  accessToken: String
  user: UserDto
  permissions: [PermissionStateDto!]
  userTemp: UserTempDto
  registerToken: String
}

input UserAuthInputDto {
  email: String!
  password: String!
}

type UserDto {
  id: ID!
  name: String!
  email: String!
  adEmail: String!
  password: String!
  groups: [Group!]!
  roles: [RoleDto!]!
}

type UserTempDto {
  name: String!
  email: String!
}
