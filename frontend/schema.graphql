# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

type ADUser {
  cn: String!
  dn: String!
  userPrincipalName: String!
}

type BaseUserDto {
  groups: [GroupDto!]!
  id: ID!
  name: String!
  roles: [RoleDto!]!
}

type Classification {
  createdAt: DateTime!
  id: ID!
  mark: Float!
  note: String!
  project: Project!
  user: User!
}

type ClassificationDto {
  createdAt: DateTime!
  id: Float!
  mark: Float!
  note: String!
  project: ProjectDto!
  user: UserDto!
}

type Group {
  id: ID!
  name: String!
  users: [User!]!
  usersCount: Float
}

type GroupDto {
  id: ID!
  name: String!
  users: [UserDto!]!
  usersCount: Float
}

type Invitation {
  createdAt: DateTime!
  id: ID!
  invited: User!
  project: Project!
  user: User!
}

type InvitationDto {
  createdAt: DateTime!
  id: ID!
  invited: BaseUserDto!
  project: ProjectDto!
  user: BaseUserDto!
}

type Mutation {
  acceptInvitation(invitationId: Float!): InvitationDto!
  changePassword(hash: String!, password: String!): Boolean!
  claimProject(filter: ProjectsFilter!): ProjectDto!
  createClassification(input: CreateClassificationDto!): ClassificationDto!
  createPasswordReset(input: CreatePasswordResetDto!): Boolean!
  createProject(input: CreateProjectDto!): ProjectDto!
  createRole(input: CreateRoleDto!): RoleDto!
  createTask(input: CreateTaskDto!): TaskDto!
  createUser(input: CreateUserDto!): UserDto!
  deleteClassification(filter: ClassificationsFilter!): ClassificationDto!
  deleteGroup(groupId: Float!): GroupDto!
  deleteInvitation(invitationId: Float!): InvitationDto!
  deleteProject(projectId: Float!): ProjectDto!
  deleteRole(roleId: Float!): RoleDto!
  deleteTask(filter: TasksFilter!): TaskDto!
  deleteUser(userId: Float!): UserDto!
  invite(input: InviteDto!): InvitationDto!
  logout: Boolean!
  signin(auth: UserAuthInputDto!): UserAuthDto!
  signup(input: SignUpUserDto!): UserAuthDto!
  updateClassification(filter: ClassificationsFilter!, updates: UpdateClassificationDto!): ClassificationDto!
  updateProfile(input: UpdateProfileDto!): UserAuthDto!
  updateProject(filter: ProjectsFilter!, updates: UpdateProjectDto!): ProjectDto!
  updateRole(filter: RolesFilter!, input: UpdateRoleDto!): RoleDto!
  updateTask(filter: TasksFilter!, updates: UpdateTaskDto!): TaskDto!
  updateUser(filter: UsersFilter!, input: UpdateUserDto!): UserDto!
}

type PasswordResetDto {
  createdAt: DateTime!
  hash: String!
  id: ID!
  used: Boolean!
  user: UserDto!
}

type Permission {
  id: ID!
  name: String!
  roles: [Role!]!
  slug: String!
}

type PermissionDto {
  id: ID!
  name: String!
  slug: String!
}

type PermissionStateDto {
  permitted: Boolean!
  slug: String!
}

type Project {
  classifications: [Classification!]!
  createdAt: DateTime!
  description: String!
  id: ID!
  invitations: [Invitation!]!
  name: String!
  owner: User!
  supervisor: User!
  tasks: [Task!]!
  users: [User!]!
}

type ProjectDto {
  classifications: [ClassificationDto!]!
  createdAt: DateTime!
  description: String!
  id: ID!
  name: String!
  owner: UserDto!
  supervisor: UserDto
  tasks: [TaskDto!]!
  users: [UserDto!]!
}

type Query {
  authUser(auth: UserAuthInputDto!): ADUser!
  baseUsers(filter: BaseUsersFilter!): [BaseUserDto!]!
  classifications(filter: ClassificationsFilter!): [ClassificationDto!]!
  groups(filter: GroupFilter!): [GroupDto!]!
  invitation(invitationId: Float!): InvitationDto!
  me: UserAuthDto
  myInvitations: [InvitationDto!]!
  myPermissions: [PermissionStateDto!]!
  passwordReset(hash: String!): PasswordResetDto!
  permissions: [PermissionDto!]!
  project(filter: ProjectsFilter!): ProjectDto!
  projects(filter: ProjectsFilter!): [ProjectDto!]!
  roles(filter: RolesFilter!): [RoleDto!]!
  task(filter: TasksFilter!): TaskDto!
  user(filter: UsersFilter!): UserDto!
  users(filter: AllUsersFilter!): [UserDto!]!
}

type Role {
  admin: Boolean!
  id: ID!
  name: String!
  permissions: [Permission!]!
  slug: String!
  student: Boolean!
  system: Boolean!
  teacher: Boolean!
  users: [User!]!
}

type RoleDto {
  admin: Boolean!
  id: ID!
  name: String!
  permissions: [PermissionDto!]!
  slug: String!
  student: Boolean!
  system: Boolean!
  teacher: Boolean!
}

type Task {
  completed: Boolean!
  createdAt: DateTime!
  description: String!
  dueDate: DateTime!
  id: ID!
  name: String!
  project: Project!
}

type TaskDto {
  completed: Boolean!
  createdAt: DateTime!
  description: String!
  dueDate: DateTime!
  id: Float!
  name: String!
  project: ProjectDto!
}

type User {
  adEmail: String!
  classifications: [Classification!]!
  email: String!
  groups: [Group!]!
  id: ID!
  invitations: [Invitation!]!
  name: String!
  password: String!
  projects: [Project!]!
  roles: [Role!]!
  supervisedProjects: [Project!]!
}

type UserAuthDto {
  accessToken: String
  registerToken: String
  user: UserDto
  userTemp: UserTempDto
}

type UserDto {
  adEmail: String!
  email: String!
  groups: [GroupDto!]!
  id: ID!
  name: String!
  password: String!
  permissions: [PermissionStateDto!]!
  projects: [ProjectDto!]!
  roles: [RoleDto!]!
}

type UserTempDto {
  email: String!
  name: String!
}

input AllUsersFilter {
  adEmail: String
  admin: Boolean
  email: String
  groups: [Float!]
  name: String
  roles: [Float!]
  rolesSlug: [String!]
  student: Boolean
  teacher: Boolean
}

input BaseUsersFilter {
  admin: Boolean
  groups: [Float!]
  roles: [Float!]
  rolesSlug: [String!]
  student: Boolean
  teacher: Boolean
}

input ClassificationsFilter {
  fromDate: DateTime = "2020-12-13T14:50:59.447Z"
  id: Float
  projects: [Float!] = []
  toDate: DateTime = "2021-01-13T14:50:59.447Z"
  users: [Float!] = []
}

input CreateClassificationDto {
  mark: Float!
  note: String
  project: Float!
  user: Float!
}

input CreatePasswordResetDto {
  email: String!
}

input CreateProjectDto {
  description: String
  name: String!
}

input CreateRoleDto {
  admin: Boolean = false
  name: String!
  permissionSlugs: [String!]
  student: Boolean = false
  teacher: Boolean = false
}

input CreateTaskDto {
  completed: Boolean
  description: String
  dueDate: DateTime!
  name: String!
  project: Float!
}

input CreateUserDto {
  adEmail: String
  email: String!
  name: String!
  password: String
  roleSlugs: [String!]
}

input GroupFilter {
  id: Float
  name: String
  order: String
}

input InviteDto {
  project: ID!
  user: ID!
}

input ProjectsFilter {
  authors: [Float!] = []
  id: Float
  name: String
  supervisors: [Float!] = []
}

input RolesFilter {
  admin: Boolean
  id: Float
  name: String
  permission: String
  slug: String
  student: Boolean
  teacher: Boolean
  user: String
}

input SignUpUserDto {
  email: String
  name: String
  password: String
}

input TasksFilter {
  id: Float
  name: String
}

input UpdateClassificationDto {
  mark: Float!
  note: String!
  projectId: Float
}

input UpdateProfileDto {
  email: String
  name: String!
  oldPassword: String
  password: String
  passwordAgain: String
}

input UpdateProjectDto {
  description: String
  name: String
  supervisor: Float
}

input UpdateRoleDto {
  admin: Boolean = false
  name: String!
  permissionSlugs: [String!]
  student: Boolean = false
  teacher: Boolean = false
}

input UpdateTaskDto {
  completed: Boolean
  description: String
  dueDate: DateTime
  name: String
}

input UpdateUserDto {
  email: String!
  groups: [Float!]
  name: String!
  roleSlugs: [String!]
}

input UserAuthInputDto {
  email: String!
  password: String!
}

input UsersFilter {
  adEmail: String
  email: String
  id: Float
  name: String
}


"A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format."
scalar DateTime
